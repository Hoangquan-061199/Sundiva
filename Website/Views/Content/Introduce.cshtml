@model ModuleViewModels
@using ADCOnline.Simple.Item
@{
    if (ViewBag.NoIndex == true)
    {
        Layout = "~/Views/shared/_LayoutNoIndex.cshtml";
    }
    if (Model.ModuleItem != null)
    {
        ViewBag.Title = Model.ModuleItem.SEOTitle;
        ViewBag.Name = Model.ModuleItem.Name;
        ViewBag.Description = Model.ModuleItem.SeoDescription;
        ViewBag.Keywords = Model.ModuleItem.SeoKeyword;
    }
    ViewBag.UrlOgImage = !string.IsNullOrEmpty(Model.ModuleItem.UrlPicture) ? Model.ModuleItem.UrlPicture : string.Empty;
    ViewBag.OgImageAlt = !string.IsNullOrEmpty(Model.ModuleItem.SEOTitle) ? Model.ModuleItem.SEOTitle : string.Empty;
    ViewBag.Hidden = true;
    string url = Context.Request.Scheme + "://" + Context.Request.Host + Context.Request.Path;
    ViewBag.IndexGoogle = ViewBag.NoIndex == true ? "noodp,noindex,nofollow" : Model.ModuleItem.IndexGoogle;
    ViewBag.LangModule = Model.ModuleItem.Lang;
    List<WebsiteContentItem> Contents = new List<WebsiteContentItem>();
    SizeImages image = new SizeImages();
    ViewBag.Banner = true;
}
@if (Model.ModuleItem != null)
{
    if (Model.ModuleItem.AlbumGalleryItems.Any())
    {
        if (Model.ModuleItem.AlbumGalleryItems.Count() == 1)
        {
            <div class="banner margin0 banner-content">
                <div class="item">
                    @Html.Raw(Utility.GetImage(WebConfig.PathServer, Model.ModuleItem.AlbumGalleryItems.FirstOrDefault(x => x.AlbumType == 3).AlbumUrl, Model.ModuleItem.Name))
                </div>
            </div>
        }
        else
        {
            <div class="banner margin0 banner-content">
                <div class="slide-index owl-carousel owl-theme">
                    @foreach (AlbumGalleryItem item in Model.ModuleItem.AlbumGalleryItems.Where(x => x.AlbumType == 3))
                    {
                        <div class="item">
                            @Html.Raw(Utility.GetImage(WebConfig.PathServer, item.AlbumUrl, Model.ModuleItem.Name))
                        </div>
                    }
                </div>
            </div>

        }
    }
    <div class="path">
        <div class="container">
            <a href="/" title="@ResourceData.Resource("TrangChu", ViewBag.Lang)">
                <svg xmlns="http://www.w3.org/2000/svg" height="15" viewBox="0 0 576 512">
                    <path d="M575.8 255.5c0 18-15 32.1-32 32.1h-32l.7 160.2c0 2.7-.2 5.4-.5 8.1V472c0 22.1-17.9 40-40 40H456c-1.1 0-2.2 0-3.3-.1c-1.4 .1-2.8 .1-4.2 .1H416 392c-22.1 0-40-17.9-40-40V448 384c0-17.7-14.3-32-32-32H256c-17.7 0-32 14.3-32 32v64 24c0 22.1-17.9 40-40 40H160 128.1c-1.5 0-3-.1-4.5-.2c-1.2 .1-2.4 .2-3.6 .2H104c-22.1 0-40-17.9-40-40V360c0-.9 0-1.9 .1-2.8V287.6H32c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L564.8 231.5c8 7 12 15 11 24z" />
                </svg>
            </a>
            <div class="icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="8" height="8" fill="currentColor"
                     class="bi bi-chevron-right" viewBox="0 0 16 16">
                    <path fill-rule="evenodd"
                          d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z" />
                </svg>
            </div>
            <vc:bread-crumb-component module-id="@Model.ModuleItem.ParentID"></vc:bread-crumb-component>
            <div>@Model.ModuleItem.Name</div>
        </div>
    </div>

    @if (Model.ListModuleItems.Any())
    {
        foreach (var module in Model.ListModuleItems.OrderBy(x => x.OrderDisplay))
        {
            switch (module.TypeView)
            {
                case StaticEnum.ThuNgo:
                    {
                        if (module.ListContentItem.Any())
                        {
                            foreach (var item in module.ListContentItem)
                            {
                                <div class="letter">
                                    <div class="container">
                                        <div class="img">
                                            @Html.Raw(Utility.GetImage(WebConfig.PathServer, item.UrlPicture, item.Name))
                                        </div>
                                        <div class="text">
                                            <h2 class="big-title uppercase border">@item.Name</h2>
                                            <div class="paragraph justify detail-content">
                                                @Html.Raw(item.Content)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        break;
                    }
                case StaticEnum.Quatrinh:
                    {
                        if (module.ListContentItem.Any())
                        {
                            foreach (var item in module.ListContentItem)
                            {
                                <div class="process">
                                    <div class="container">
                                        <div class="img">
                                            @Html.Raw(Utility.GetImage(WebConfig.PathServer, item.UrlPicture, item.Name))
                                        </div>
                                        <div class="text">
                                            <h2 class="big-title uppercase">@item.Name <strong>@item.Title</strong></h2>
                                            <div class="paragraph justify detail-content">
                                                @Html.Raw(item.Content)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        break;
                    }
                case StaticEnum.TamNhin:
                    {
                        if (module.ListContentItem.Any())
                        {
                            foreach (var item in module.ListContentItem)
                            {
                                <div class="process vision">
                                    <div class="container">
                                        <div class="img">
                                            @Html.Raw(Utility.GetImage(WebConfig.PathServer, item.UrlPicture, item.Name))
                                        </div>
                                        <div class="text">
                                            <h2 class="big-title uppercase">@item.Name <strong>@item.Title</strong></h2>
                                            <div class="paragraph justify detail-content">
                                                @Html.Raw(item.Content)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        break;
                    }
                case StaticEnum.SoDo:
                    {
                        if (module.ListContentItem.Any())
                        {
                            foreach (var item in module.ListContentItem)
                            {
                                <div class="diagram">
                                    <div class="container">
                                        <h2 class="big-title uppercase center">@item.Name <strong>@item.Title</strong></h2>
                                        <div class="img">
                                            @Html.Raw(item.Content)
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        break;
                    }
            }

        }
    }




}